services:
  # --- GÖZLEMLENEBİLİRLİK (OBSERVABILITY) SERVİSLERİ ---
  loki:
    image: grafana/loki:2.9.0
    container_name: azuraforge_loki
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki-config.yml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    restart: always

  promtail:
    image: grafana/promtail:2.9.0
    container_name: azuraforge_promtail
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./config/promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    restart: always

  grafana:
    image: grafana/grafana-oss:10.2.2
    container_name: azuraforge_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      # YENİ: Otomatik yapılandırma (provisioning) yolunu belirtiyoruz
      - GF_PROVISIONING_PATH=/etc/grafana/provisioning
    volumes:
      - grafana_data:/var/lib/grafana
      # YENİ: Host'taki config dizinimizi container'daki provisioning yoluna bağlıyoruz
      - ./config/grafana:/etc/grafana/provisioning
    depends_on:
      - loki
    restart: always

  # --- ALTYAPI SERVİSLERİ ---
  redis:
    image: redis:alpine
    container_name: azuraforge_redis
    ports: ["6379:6379"]
    volumes: ["redis_data:/data"]
    logging: # <-- LOGLAMA EKLENDİ
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  postgres:
    image: postgres:15-alpine
    container_name: azuraforge_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports: ["5432:5432"]
    volumes: ["postgres_data:/var/lib/postgresql/data"]
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    logging: # <-- LOGLAMA EKLENDİ
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        
  # --- ANA PLATFORM SERVİSLERİ ---
  api:
    container_name: azuraforge_api
    build:
      context: ../api
      dockerfile: Dockerfile
    ports: ["8000:8000"]
    volumes:
      - ../api:/app
      - ${REPORTS_DIR}:/app/reports
      - ${CACHE_DIR}:/app/.cache
    environment:
      - REDIS_URL=redis://redis:6379/0
      - REPORTS_DIR=/app/reports
      - CACHE_DIR=/app/.cache
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_started }
    logging: # <-- LOGLAMA EKLENDİ
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  worker:
    container_name: azuraforge_worker
    build:
      context: ../worker
      dockerfile: Dockerfile
    volumes:
      - ../worker:/app
      - ${REPORTS_DIR}:/app/reports
      - ${CACHE_DIR}:/app/.cache
    environment:
      - REDIS_URL=redis://redis:6379/0
      - REPORTS_DIR=/app/reports
      - CACHE_DIR=/app/.cache
      - AZURAFORGE_DEVICE=${AZURAFORGE_DEVICE}
      - DATABASE_URL=${DATABASE_URL}
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_started }
    runtime: nvidia
    shm_size: '4gb'
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    logging: # <-- LOGLAMA EKLENDİ
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  dashboard:
    container_name: azuraforge_dashboard
    build:
      context: ../dashboard
      dockerfile: Dockerfile
    command: npm run dev -- --host 0.0.0.0
    ports: ["5173:5173"]
    volumes:
      - ../dashboard:/app
      - /app/node_modules
    depends_on: [api]
    logging: # <-- LOGLAMA EKLENDİ
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  redis_data:
  postgres_data:
  grafana_data: # <-- YENİ VOLUME