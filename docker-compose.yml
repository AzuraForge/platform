# docker-compose.yml (TAM VE EKSİKSİZ VERSİYON)

# Docker Compose dosyasının 3.8 versiyonunu kullandığımızı belirtiyoruz.
# Bu, 'secrets' gibi modern özellikleri destekler.
version: "3.8"

# Proje genelinde kullanılacak sırları tanımlıyoruz.
# Docker, bu dosyaların içeriğini güvenli bir şekilde konteynerlere iletecek.
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  postgres_user:
    file: ./secrets/postgres_user.txt

services:
  # --- GÖZLEMLENEBİLİRLİK (OBSERVABILITY) SERVİSLERİ ---
  loki:
    image: grafana/loki:2.9.0
    container_name: azuraforge_loki
    ports: ["3100:3100"]
    volumes: ["./config/loki-config.yml:/etc/loki/local-config.yaml"]
    command: -config.file=/etc/loki/local-config.yaml
    restart: always

  promtail:
    image: grafana/promtail:2.9.0
    container_name: azuraforge_promtail
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./config/promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    restart: always

  grafana:
    image: grafana/grafana-oss:10.2.2
    container_name: azuraforge_grafana
    ports: ["3000:3000"]
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_PROVISIONING_PATH=/etc/grafana/provisioning
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    depends_on: [loki]
    restart: always

  # --- ALTYAPI SERVİSLERİ ---
  redis:
    image: redis:alpine
    container_name: azuraforge_redis
    ports: ["6379:6379"]
    volumes: ["redis_data:/data"]
    logging:
      driver: "json-file"
      options: {max-size: "10m", max-file: "3"}

  postgres:
    image: postgres:15-alpine
    container_name: azuraforge_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    ports: ["5432:5432"]
    volumes: ["postgres_data:/var/lib/postgresql/data"]
    restart: always
    healthcheck:
      # Sır dosyasının içeriğini okuyarak healthcheck yapıyoruz.
      test: ["CMD-SHELL", "pg_isready -U $$(cat /run/secrets/postgres_user) -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options: {max-size: "10m", max-file: "3"}
    secrets:
      - postgres_user
      - postgres_password
        
  # --- ANA PLATFORM SERVİSLERİ ---
  api:
    container_name: azuraforge_api
    build:
      context: ../api
      dockerfile: Dockerfile
    ports: ["8000:8000"]
    volumes:
      - ../api:/app
      - ${REPORTS_DIR:-./reports}:/app/reports
      - ${CACHE_DIR:-./.cache}:/app/.cache
    environment:
      # DİKKAT: Artık DATABASE_URL'i burada shell komutuyla oluşturmuyoruz.
      # Sırlardan gelen ortam değişkenlerini kullanıyoruz.
      - DATABASE_URL=postgresql+psycopg2://${POSTGRES_USER_SECRET}:${POSTGRES_PASSWORD_SECRET}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - REPORTS_DIR=/app/reports
      - CACHE_DIR=/app/.cache
      - SECRET_KEY=${SECRET_KEY}
    command: >
      sh -c "wait-for-it.sh postgres:5432 -t 60 -- uvicorn azuraforge_api.main:app --host 0.0.0.0 --port 8000 --reload"
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_started }
    logging:
      driver: "json-file"
      options: {max-size: "10m", max-file: "3"}
    secrets:
      - source: postgres_user
        target: POSTGRES_USER_SECRET
      - source: postgres_password
        target: POSTGRES_PASSWORD_SECRET

  worker:
    container_name: azuraforge_worker
    build:
      context: ../worker
      dockerfile: Dockerfile
    volumes:
      - ../worker:/app
      - ${REPORTS_DIR:-./reports}:/app/reports
      - ${CACHE_DIR:-./.cache}:/app/.cache
    environment:
      - DATABASE_URL=postgresql+psycopg2://${POSTGRES_USER_SECRET}:${POSTGRES_PASSWORD_SECRET}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - REPORTS_DIR=/app/reports
      - CACHE_DIR=/app/.cache
      - AZURAFORGE_DEVICE=${AZURAFORGE_DEVICE:-cpu}
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_started }
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    logging:
      driver: "json-file"
      options: {max-size: "10m", max-file: "3"}
    secrets:
      - source: postgres_user
        target: POSTGRES_USER_SECRET
      - source: postgres_password
        target: POSTGRES_PASSWORD_SECRET

  dashboard:
    container_name: azuraforge_dashboard
    build:
      context: ../dashboard
      dockerfile: Dockerfile
    command: npm run dev -- --host 0.0.0.0
    ports: ["5173:5173"]
    volumes:
      - ../dashboard:/app
      - /app/node_modules
    depends_on: [api]
    logging:
      driver: "json-file"
      options: {max-size: "10m", max-file: "3"}

# Paylaşımlı disk alanlarını tanımlıyoruz.
volumes:
  redis_data:
  postgres_data:
  grafana_data: