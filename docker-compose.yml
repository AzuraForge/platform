services:
  # 1. Redis Servisi (Mesaj Kuyruğu ve Sonuç Deposu)
  redis:
    image: "redis:alpine"
    container_name: azuraforge_redis
    ports: ["6379:6379"]
    volumes: ["redis_data:/data"]

  # --- KÜTÜPHANE SERVİSLERİ (SADECE BUILD VE SAĞLIK KONTROLÜ İÇİN) ---
  # Bu servisler, ana uygulamaların (API, Worker) bağımlılıklarını kurabilmesi için önceden build edilir.
  # Bağımlılık zincirinde alt seviyede oldukları için 'depends_on' gerekmez,
  # API ve Worker Dockerfile'ları onları zaten pip ile çeker.
  # Buradaki tanımlar, onların da build edildiğini doğrulamak içindir.

  # # 2. Core Kütüphanesi
  # core_lib:
  #   container_name: azuraforge_core_lib_build_test
  #   build:
  #     context: ./core # 'core' reposunun bulunduğu klasörü göster
  #     dockerfile: Dockerfile # 'core' reposunun içindeki Dockerfile
  #   command: python -c "import azuraforge_core; print('AzuraForge Core built and imported successfully in Docker!')"
  #   # volumes: - ./core:/app # Geliştirme sırasında kodu anında yansıtmak için
  #   # Bu servis sadece build ediliyor, çalıştırılmıyor. Mount'a gerek yok.

  # # 3. Learner Kütüphanesi
  # learner_lib:
  #   container_name: azuraforge_learner_lib_build_test
  #   build:
  #     context: ./learner
  #     dockerfile: Dockerfile
  #   command: python -c "import azuraforge_learner; print('AzuraForge Learner built and imported successfully in Docker!')"
  #   # volumes: - ./learner:/app # Sadece build ediliyor.

  # # 4. Applications Katalogu
  # applications_catalog:
  #   container_name: azuraforge_applications_catalog_build_test
  #   build:
  #     context: ./applications
  #     dockerfile: Dockerfile
  #   command: python -c "import azuraforge_applications; print('AzuraForge Applications Catalog built and imported successfully in Docker!')"
  #   # volumes: - ./applications:/app # Sadece build ediliyor.

  # 5. App Stock Predictor (Uygulama Eklentisi)
  app_stock_predictor:
    container_name: azuraforge_app_stock_predictor_build_test
    build:
      context: ./app-stock-predictor
      dockerfile: Dockerfile
    command: python -c "import azuraforge_stockapp; print('AzuraForge App Stock Predictor built and imported successfully in Docker!')"
    # volumes: - ./app-stock-predictor:/app # Sadece build ediliyor.

  # --- ANA PLATFORM SERVİSLERİ ---
  # Bu servisler, tüm ekosistemin temelidir ve diğer kütüphanelere bağımlıdır.

  # 6. API Servisi
  api:
    container_name: azuraforge_api
    build:
      context: ./api # 'api' reposunun bulunduğu klasörü göster
      dockerfile: Dockerfile # 'api' reposunun içindeki Dockerfile
    command: start-api # 'api' reposundaki entrypoint script'i
    ports: ["8000:8000"]
    volumes:
      - ./api:/app # API'ın kendi kodu
      - ${REPORTS_DIR}:/app/reports # Ortak rapor dizini (Host makineden mount ediliyor)
      - ${CACHE_DIR}:/app/.cache # YENİ SATIR
    environment:
      - REDIS_URL=${REDIS_URL}
      - REPORTS_DIR=/app/reports
      - CACHE_DIR=/app/.cache # YENİ SATIR
    depends_on: [redis] # Redis'e bağımlı

  # 7. Worker Servisi
  worker:
    container_name: azuraforge_worker
    build:
      context: ./worker
      dockerfile: Dockerfile
    command: start-worker
    volumes:
      - ./worker:/app # Worker'ın kendi kodu
      - ${REPORTS_DIR}:/app/reports # Raporlar için
      - ${CACHE_DIR}:/app/.cache # YENİ SATIR
    environment:
      - REDIS_URL=${REDIS_URL}
      - REPORTS_DIR=/app/reports
      - CACHE_DIR=/app/.cache # YENİ SATIR
    depends_on: [redis]

  # 8. Dashboard Servisi
  dashboard:
    container_name: azuraforge_dashboard
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    command: npm run dev -- --host 0.0.0.0
    ports: ["5173:5173"]
    volumes:
      - ./dashboard:/app
      - /app/node_modules
    depends_on: [api]

volumes:
  redis_data: # Redis verilerini kalıcı tutmak için volume
